name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天UTC 0点运行测试
    - cron: '0 0 * * *'

env:
  PYTHON_VERSION: '3.9'

jobs:
  # 代码质量检查
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run code formatting check
      run: |
        black --check --diff src/
      continue-on-error: true
    
    - name: Run import sorting check
      run: |
        isort --check-only --diff src/
      continue-on-error: true
    
    - name: Run flake8
      run: |
        flake8 src/ --max-line-length=88
      continue-on-error: true
    
    - name: Run Pylint
      run: |
        pylint src/ --output-format=github
      continue-on-error: true
    
    - name: Security check with Bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt
      continue-on-error: true
    
    - name: Upload Bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  # 测试矩阵
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # 排除一些不必要的组合以节省CI时间
          - os: macos-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.10'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run tests
      run: |
        pytest --cov=src --cov-report=xml --cov-report=html --junitxml=junit.xml -v
      env:
        # 测试环境的模拟API密钥
        OPENAI_API_KEY: sk-test-key-for-testing
        DEEPSEEK_API_KEY: sk-test-key-for-testing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.9' && matrix.os == 'ubuntu-latest'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          junit.xml
          htmlcov/

  # 构建检查
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel
    
    - name: Build package
      run: |
        python -m build --skip-dependency-check
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  # 文档构建
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install sphinx sphinx-rtd-theme
    
    - name: Build documentation
      run: |
        cd docs
        sphinx-build -b html . _build/html
    
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html

  # 发布到GitHub Releases
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Generate changelog
      id: changelog
      run: |
        # 获取最新的两个标签之间的变更
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
        echo "## 变更日志" > changelog.md
        echo "" >> changelog.md
        git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" >> changelog.md
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        body_path: changelog.md
        files: |
          dist/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 部署到GitHub Pages (可选 - 需要在仓库设置中启用 Pages)
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: docs
    if: github.ref == 'refs/heads/main'
    continue-on-error: true  # 如果 Pages 未配置，允许失败
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Check if Pages is enabled
      run: |
        echo "Checking GitHub Pages configuration..."
        echo "If this step fails, Pages is not enabled for this repository"
    
    - name: Download documentation
      uses: actions/download-artifact@v4
      with:
        name: documentation
        path: docs-html/
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
      continue-on-error: true
    
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs-html/
      continue-on-error: true
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      continue-on-error: true
    
    - name: Pages deployment status
      run: |
        if [ "${{ steps.deployment.outcome }}" = "success" ]; then
          echo "✅ Documentation deployed to GitHub Pages"
        else
          echo "⚠️ GitHub Pages not configured or deployment failed"
          echo "To enable Pages deployment:"
          echo "1. Go to repository Settings > Pages"
          echo "2. Set Source to 'GitHub Actions'"
          echo "3. Re-run this workflow"
        fi
